#!/bin/bash


# DoFetchAndProcessTopten - fetch results for the specified season and, if the results are different from the
#	last time we generated the top 10 standings, generate new standings.
#
# PASSED:
#	$1 - the season, e.g. 2017
#	$2 - (optional) If present and equal to 'y' we'll force generation of the standings page after fetching
#		the results. If present and equal to anything else (or not present) we will generate the standings page only
#		if the results look different than the last time we fetched the results.  This is the default.
#
# NOTES:
#	When this script begins it will move the to-be generated index.html to index.html.old.  This
#	way you can always tell if the last run of this script generated a new standings page.  If
#	there is no index.html file in the "Generated files" directory then this means that the
#	last run of this script did not generate a new standings page.  To view the last successfully
#	generated standings page when there is no index.html file look at index.html.old. 
#
# To force GetResults to detect a change in data, simply set a stat to 0.  For example:
#	Update FetchStats set LinesRead=0 where FetchStatsId=1;
#

SEASON=$1
STARTDATE=`date +'%a, %b %d %G at %l:%M:%S %p %Z'`
TMPFILE=/tmp/DoFetchAndProcessTopten-$SEASON.$$
TMPFILE2=/tmp/DoFetchAndProcessTopten_2-$SEASON.$$
ARCHIVED_TMPFILE=/tmp/DoFetchAndProcessTopten-$SEASON.archive
ARCHIVED_TMPFILE2=/tmp/DoFetchAndProcessTopten_2-$SEASON.archive
EMAIL_NOTICE=bobup@acm.org
TOPTEN='./Topten2.pl'
TTSTATS='./TTStats.pl'
SIMPLE_SCRIPT_NAME=`basename $0`
DOFETCH_LOG=/tmp/DoFetchLog-$SEASON.txt

# debugging...
#set -x

if [ ."$1" = . ]  ; then 
	echo "$SIMPLE_SCRIPT_NAME: Missing season on `hostname` - ABORT!"
	exit 1
fi

echo "";echo "";echo "";echo "";echo ""; echo '******************** Begin' "$0"

# compute the full path name of the directory holding this script.  We'll find the
# programs to run relative to this directory:
script_dir=$(dirname $0)
pushd $script_dir/.. >/dev/null; FULLPATHCODE=`pwd -P`		# cwd = script dir

# Next compute the full path name of the directory into which the generated files are placed:
# First, make sure we have a GeneratedFiles directory:
pushd .. >/dev/null											# cwd = code dir
mkdir -p GeneratedFiles
cd GeneratedFiles >/dev/null                                # cwd = GeneratedFiles
GENERATED_DIR=`pwd -P`/Generated-$1
# make sure the GENERATED_DIR exists
mkdir -p $GENERATED_DIR
popd >/dev/null												# cwd = script dir

# log files produced by programs executed by this script:
GETRESULTSLOG=$GENERATED_DIR/GetResultsLog-$1.txt
TOPTENLOG=$GENERATED_DIR/TopTenLog-$1.txt
# semaphore used to make sure we don't execute this script more than once at a time:
SEMAPHORE=$GENERATED_DIR/DoFetchAndProcessTopten_Semaphore

# if we're running on the PMS server we need to initialize our Perl search path (@INC)
#if hostname | grep -q "pair.com"  ; then
#	# this is for dev
#	export PERL5LIB=/usr/home/caroline/Automation/PerlCpan/Excel-Writer-XLSX-0.96/lib\
#:/usr/home/caroline/Automation/PerlCpan/Spreadsheet-Read-0.75\
#:/usr/home/caroline/Automation/PerlCpan/Spreadsheet-XLSX-0.15/lib
#fi
#echo "PERL5LIB is '$PERL5LIB'"

##########################################################################################
# FUNCTIONS:
#
# ExecuteTopten - this function will run the TopTen.pl perl script with the supplied
# 	argument.
#
# PASSED:
#	$1 - the year to process, e.g. "2017"
#
# RETURNED:
#	n/a
#	This routine will only return if TopTen.pl doesn't get any errors.  If errors are
#	detected then an email is sent and this script is aborted.
#
ExecuteTopten() {
	rm -f $TOPTENLOG
	$TOPTEN $1
	# first check to see if Topten ran at all...
	if [ ! -f $TOPTENLOG ] ; then
		echo "$TOPTEN $SEASON failed to run (syntax error?), so we are GIVING UP"'!'
		/usr/sbin/sendmail -f $EMAIL_NOTICE $EMAIL_NOTICE <<-BUp0
			Subject: $SEASON FATAL ERROR (syntax error?) during $TOPTEN $1 on `hostname`
			There was an error discovered when running $TOPTEN $1
			preventing it from running and creating a log file.
			(STARTed on $STARTDATE, ABORTed on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			BUp0
		rm $SEMAPHORE
		echo "(STARTed on $STARTDATE, ABORTed (syntax error?) on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)"
		exit 1;
	fi
	# Topten ran, but did it get an error...?
	if grep -q "ABORT" <$TOPTENLOG ; then
		echo "$TOPTEN $SEASON got an ABORT, so we are GIVING UP"'!'
		echo "See the TopTen log file: $TOPTENLOG"
		/usr/sbin/sendmail -f $EMAIL_NOTICE $EMAIL_NOTICE <<-BUp0
			Subject: $SEASON FATAL ERROR during $TOPTEN $1 on `hostname`
			There was an error discovered when running $TOPTEN $1
			The TopTen log file is here:  $TOPTENLOG
			(STARTed on $STARTDATE, ABORTed on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			BUp0
		rm $SEMAPHORE
		echo "(STARTed on $STARTDATE, ABORTed on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)"
		exit 1;
	fi
	# if we got here it looks like we generated top ten results!  Now generate statistics:
	$TTSTATS $1
}  # end of Executetopten()


#
# LogMessage - generate a log message to various devices:  email, stdout, and a script 
#	log file.
#
# PASSED:
#	$1 - the subject of the log message.
#	$2 - the log message
#	$3 - if non-empty then write to the dedicated script log file ($DOFETCH_LOG)
#	$4 - if non-empty then delete the semaphore
#
LogMessage() {
	MSG=""
	echo "$2"
	if [ -n "$3" ] ; then
		echo "$1" >$DOFETCH_LOG
		echo "$2" >>$DOFETCH_LOG
		MSG="(see log file $DOFETCH_LOG)"
		echo $MSG
	fi
	/usr/sbin/sendmail -f $EMAIL_NOTICE $EMAIL_NOTICE <<- BUpLM
		Subject: $1
		$2
		$MSG
		BUpLM
	if [ -n "$4" ] ; then
		rm -f $SEMAPHORE
	fi
} # end of LogMessage()

# END OF FUNCTIONS.
##########################################################################################


##################  CHECK THE SEMAPHORE   ################################################
if [ -e $SEMAPHORE ] ; then
	# abort - program already running!
	LogMessage "$SEASON Attempted parallel executions of $SIMPLE_SCRIPT_NAME on `hostname`" "$(cat <<- BUp9 
		ABORT - $SIMPLE_SCRIPT_NAME has been running since $(cat $SEMAPHORE) on `hostname`
		If you think this is wrong and $SIMPLE_SCRIPT_NAME is not running then do this:
		   rm $SEMAPHORE
		(STARTed on $STARTDATE, ABORTed on $(date +'%a, %b %d %G at %l:%M:%S %p %Z'))
		BUp9
		)"
	exit 1
else
	echo $STARTDATE > $SEMAPHORE
fi
#######################  END OF SEMAPHORE - GET TO WORK  #################################

#echo "GETRESULTSLOG = $GETRESULTSLOG"
#echo "TOPTENLOG = $TOPTENLOG"

# remove the generated index.html if it exists.  This way we'll know when a new one is generated.
if [ -e "$GENERATED_DIR/index.html" ] ; then
	mv -f $GENERATED_DIR/index.html $GENERATED_DIR/index.html.old
fi


##############################  GET RESULT FILES  ########################################

cd "$FULLPATHCODE"
# get the latest results for the specified season
echo "$SIMPLE_SCRIPT_NAME:  Starting GetResults.pl to get the latest results for $1 (`date +'%a, %b %d %G at %l:%M:%S %p %Z'`)"
rm -f $GETRESULTSLOG
./GetResults.pl $1 > $TMPFILE

# if the above GetResults got an error we're going to abort the whole thing.  It's 
# probably a DB problem, or a file system problem, so it probably doesn't make sense
# to continue:
if grep -q "ERROR" < $GETRESULTSLOG ; then
########################  GOT ERROR WITH RESULT FILES  ###################################
	echo "$SIMPLE_SCRIPT_NAME: GetResults.pl got an ERROR - exit."
	tail -n -8 $GETRESULTSLOG >$TMPFILE2
	LogMessage "$SEASON FATAL ERROR during GetResults.pl $1 on `hostname`, so we are GIVING UP!"  "$(cat <<- BUp1
		There was an error discovered when running GetResults $1 on `hostname`
		Details from GetResults.pl:
		------
		`cat $TMPFILE2`
		------
		Script logs can be viewed on $TMPFILE and $TMPFILE2
		GetResults.pl logs are at:  $GETRESULTSLOG
		(STARTed on $STARTDATE, Terminated on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
		BUp1
		)" "x" "x"
	exit 1
else
	if grep -q "Results have changed" < $GETRESULTSLOG ; then
##############################  GOT NEW RESULT FILES  ####################################
		# looks like we've got some changes!
		tail -n -13 $GETRESULTSLOG | grep -v "Get the results for USMS Records" >$TMPFILE2
		echo "$SIMPLE_SCRIPT_NAME:  GetResults.pl found new results..."
		echo "...Starting $TOPTEN to process the NEW latest results for $1 (`date +'%a, %b %d %G at %l:%M:%S %p %Z'`)"
		ExecuteTopten $1
		LogMessage "$SEASON: A new Standings page has been generated on `hostname`" "$(cat <<- BUp2
			A new Standings page has been generated for the year $1 by the $0 script on `hostname`..
			Generation was completed on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`.
			Details from GetResults.pl:
			------
			`cat $TMPFILE2`
			------
			Script logs can be viewed on $ARCHIVED_TMPFILE and $ARCHIVED_TMPFILE2
			GetResults.pl logs are at:  $GETRESULTSLOG
			TopTen.pl logs are at: $TOPTENLOG
			(STARTed on $STARTDATE, Terminated on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			BUp2
			)" "x"
	elif [ ."$2" == .y ] ; then
########################  NO NEW RESULT FILES BUT GENERATE TOP 10 ANYWAY  ################
		# even though there are no changes we're going to generate the standings anyway
		tail -n -13 $GETRESULTSLOG | grep -v "Get the results for USMS Records" >$TMPFILE2
		echo "$SIMPLE_SCRIPT_NAME:  GetResults.pl found NO NEW results, but as requested..."
		echo "$SIMPLE_SCRIPT_NAME:  ...Starting $TOPTEN to process the PREVIOUS latest results for $1 (`date +'%a, %b %d %G at %l:%M:%S %p %Z'`)"
		ExecuteTopten $1
		LogMessage \
			"$SEASON: Found NO changes in the USMS or PAC results, but we'll generate standings anyway on `hostname`" \
			"$(cat <<- BUp3
			Even though there appear to be no changes in the PAC and USMS results we 
			generated a new standings page AS REQUESTED for the year $1 using the 
			$0 script on `hostname`.
			Generation was completed on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`.
			Details from GetResults.pl:
			------
			`cat $TMPFILE2`
			------
			Script logs can be viewed on $ARCHIVED_TMPFILE and $ARCHIVED_TMPFILE2
			GetResults.pl logs are at:  $GETRESULTSLOG
			TopTen.pl logs are at: $TOPTENLOG
			(STARTed on $STARTDATE, Terminated on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			BUp3
			)" "x"
	else
########################  NO NEW RESULT FILES - DON'T GENERATE TOP 10  ###################
		tail -n -8 $GETRESULTSLOG >$TMPFILE2
		echo "$SIMPLE_SCRIPT_NAME:  GetResults.pl found NO NEW results so we will exit."
		LogMessage "$SEASON: No new Standings page on `hostname`" "$(cat <<- BUp4
			There were no new changes for $1 on `hostname`.
			(Results were fetched and compared with previous results on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			Details from GetResults.pl:
			------
			`cat $TMPFILE2`
			------
			Script logs can be viewed on $ARCHIVED_TMPFILE and $ARCHIVED_TMPFILE2
			GetResults.pl logs are at:  $GETRESULTSLOG
			(STARTed on $STARTDATE, Terminated on `date +'%a, %b %d %G at %l:%M:%S %p %Z'`)
			BUp4
			)" "x"
	fi
fi

####################################  ALL DONE  ##########################################
rm -f $ARCHIVED_TMPFILE $ARCHIVED_TMPFILE2
mv $TMPFILE $ARCHIVED_TMPFILE
mv $TMPFILE2 $ARCHIVED_TMPFILE2
rm -f $SEMAPHORE

echo ""; echo '******************** End' "$0"


exit;
