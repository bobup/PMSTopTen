GIT-TTPoints:
This are just some random notes used to write an eventual document.
THE FORMAL DOCUMENT IS PMSTopTen.md WHICH CAN BE FOUND IN THE DIRECTORY HOLDING THIS FILE.


*** Definitions:
	- rootDir:  the parent of our various appRootDir's.  The appRootDirs are:
		PMSOWPoints - manage PMS open water points
		PMSTopTen - manage PMS AGSOTY (that's what this writeup is concentrating on)
		PMSPerlModules - helper Perl modules used by the two above projects.
	- appRootDir: the PMSTopTen directory, the parent of which is rootDir
	- appDirName: the directory holding the code.  Usually PMSTopTen/Code/
	- yearToProcess: the season to process, e.g. 2017
	- new season (aka <new season>) - a season we haven't started processing yet, or we
		just started computed.  We usually don't start thinking about the new season until 
		June of the current season.
	- old season (aka <old season>) - a season we have been processing for a while, or 
		we processed in the past or have or are ready to stop processing.
	- current season (aka <current season>) - the primary season we're working on.  It's usually the 
		same as the current year.
		Example:  If it's July, 2018, then the current season is 2018, the old season is 2017,
			and new season is 2019 (the SCY season begins on June 1).  In November, 2018 the current 
			season is 2018, the old season is 2018, and the new season is 2019.  In January,
			2019, the current season is 2019, the old season is 2018, and the new season is
			2019.

=========================================================================================

Added 9dec2021: needs to be added to md doc:

If you have a new version of the PMSTopTen tree and want to check it into github, 
and you've changed or added any "private" files, e.g.
	- DB property files, or
	- RSIND files, or
	- any other "private data" files, 
but you can't check those into github for obvious reasons then do the following:
	# update the following to include any new private files, then
	%  cd PMSTopTen
	%  tar cvf PrivateTTData-`date +%d%b%Y`.tar \
		SeasonData/Season-*/PMSSwimmerData/*RSIND* \
		SeasonData/Season-*/properties_DB* 
		
then save the PrivateTTData file to someplace secure. Note that the full name of the file
is something like "PrivateTTData-08Dec2021.tar", where the date part of the name is the date the
file was created. We'll call that part of the file name {correct date here} below.

Later, when it's time to clone the master repository on a working computer to this:
	% cd <rootDir>
	% git clone https://github.com/bobup/PMSTopTen
	# the above creates the populated PMSTopTen directory tree without the private files.
	# next, put the private files where they belong in the PMSTopTen tree:
	% cd PMSTopTen
	% tar xf ../Private/TTPrivateArchives/PrivateTTData-{correct date here}.tar 
	






=========================================================================================
=========================================================================================

=========================================================================================
NOTE:  THIS SECTION HAS BEEN REPLACED WITH THE .md FILE
Calendar of Actions:
	- Twice a day:  the cron job runs that will fetch new results (if any), and if there are any new results, this job will compute a new AGSOTY page and push it to the production server.
	- The first Monday following March 1 of the current year:  The final AGSOTY standings for the old season will be computed on this day (or soon thereafter, depending on the availability of the person managing AGSOTY standings.)  Deliver AGSOTY spreadsheets to the Laura Val Swimmer of the Year Committee.  The spreadsheets include:
		- FullExcelResults-<old season>.xlsx
			- Full results showing all CAT 1 competing swimmers
		- Top_3_ExcelResults-<old season>.xlsx
			- Show the top 3 CAT 1 swimmers for each gender and age group.
		- TopSOTYContenders-<old season>.xlsx
			- The top 'N' (e.g. 10) CAT 1 male and female swimmers
		Each of the above spreadsheets can be fetch via an http request to the same server that hosts the AGSOTY page, e.g. 
		https://pacificmasters.org/points/standings-2018/TopSOTYContenders-2018.xlsx
	- After the final AGSOTY standings are computed for the old season (after the first Monday following March 1 - see above) the old season is archived and moved into the Historical area.  See "move a season <yearToProcess> into Historical" below.
	- June 1 (or after):  Begin the new season, keeping the current season.  See "Begin a new season" below.
	- January 1 (or slightly after):  Confirm the "Laura Val Swimmer of the Year Awards" page (https://pacificmasters.org/content/laura-val-swimmer-year-awards at the time of this writing) points to the AGSOTY page for the current season (aka the new season) and the old season.

=========================================================================================

(following on .md file)

*** Begin a new season:  (leave old season in place so we can compute points for 
	both seasons.  See "Remove an old season" below when we no longer need to compute
	points for the old season.)
	Do this on the master development machine. We'll sync all other dev machines when finished.
	We can begin a new season anytime after June 1, since the SCY season begins on June 1.
	- Create our new season-specific Source directory:
		% cd <appRootDir>/SeasonData
		- Copy the latest Season-<old season> directory
		- Paste to "Season-<new season>"
		(at this point we have at least two Season directories:  Season-<old season> and
		 Season-<new season>.  For example, Season-2016/ and Season-2017/)
		- cd to "Season-<new season>"
		- remove SourceData-<old season>  (remember, this is still in the 
			Season-<old season> directory)
		- create the SourceData-<new season> directory
		- cd PMSSwimmerData
		- remove all old RSIDN files and get a new one (or use an old one for now)
			- Same idea for the Club data file and the Merged Members file.  Note that those
				files are optional but you should probably get them if you don't have them.
		- cd ..   (cwd=Season-<new season>)

		- rename the "properties-<old season>.txt" to "properties-<new season>.txt"
		- rename the "properties_DB-<old season>.txt" to "properties_DB-<new season>.txt"
		- edit "properties-<new season>.txt" and make necessary changes, e.g.:
			- comment line with name of file
			- Copyright year
			- almost everything else is parameterized with the year by using "{YearBeingProcessed}"
				so you don't have to change those.
		- edit "properties_DB-<new season>.txt" and make necessary changes, e.g.:
			(Some installations will require a different
			MySQL user name and/or password for each new database.  In addition, some 
			installations will not allow a simple database name like "TopTen_2017" so the
			below "Initialize our database" instructions will have to be modified, requiring 
			a modification of the 'properties_DB-{new season}.txt' property file.)
			- change the name of the new season's database (dbName - 
				see Initialize our database below.)
			- change the Username and password of the MySQL user for this new database (if 
				necessary)
			
	- Initialize our database:
		  - On a MAC: this is platform-dependent, so you may have to adjust depending on your
		   installation.  These instructions assume a simple MySQL platform on a MAC.)
			- mysql -u root -p<MySql root password>   
				- CREATE DATABASE TopTen_<new season>;  # (DB name may be platform-dependent)
				- GRANT ALL ON TopTen_<new season>.* TO DBTopTen IDENTIFIED BY 'TopTen';
					(grant all privileges on db (all tables) to Username identified by password.
					Note that Username and password may be platform-dependent)
				- quit
		  - On the dev linux machine: the act of creating the db using pair.com ACC login

(above in .md file)
=========================================================================================
(following not in .md file yet)

	- use GetResults.pl to make sure we get the expected results in 
		the directories:
			<appRootDir>/SeasonData/Season-<new season>
			<appRootDir>/GeneratedFiles/Generated-<new season>
		- from Eclipse:  Run GetResults.pl with the parameter <new season>, or
		- from Terminal: <appRootDir>/Code/Scripts/FetchTopten <new season>


*** don't create link in dev directory on dev machine. need a different link on dev server - see
*** "Begin a new season on PMS Dev" below.
	- Add a link to the Support directory to the Generated-<new season> directory (but ONLY
		if you want to request any of the generated HTML files via a browser):
		- copy the Support directory alias from Generated-<old season> 
			to Generated-<new season>, e.g.:
*** use ln -s instead...?
				% cd Generated-<old season>
				% cp -a Support ../Generated-<new season>
				
	- use Topten2.pl to process the fetched files and make sure we get the expected results
		in the <appRootDir>/SeasonData/Season-<new season> directory:
		- from Eclipse:  Run Topten2.pl with the parameter <new season>, or
		- from Terminal: <appRootDir>/Code/Scripts/GenTopten2 <new season>
	
	- Clean up:
		- Clean out any old files in the <appRootDir>/GeneratedFiles/Generated-<new season>
			directory EXCEPT the Support symbolic link.  (There shouldn't be any, but if there
			are then remove them since they probably belong to a previous season.)
		- Clean out any old files in the 
			<appRootDir>/SeasonData/Season-<new season>/SourceData-<new season>/ 
			directory.  (There shouldn't be any, but if there
			are then remove them since they probably belong to a previous season.)
		- Commit and push the new season's files -
			- DO NOT PUSH THE "properties_DB-<new season>.txt" FILE!
			- DO NOT PUSH ANY "RSIND" FILE!
			- It's not necessary to push generated files (yet).

	- Set up the PMS servers:
		- on PMS dev:  see "Begin a new season on PMS Dev" below
		- on PMS Prod:  see "Begin a new season on PMS Prod" below

	- Refresh your Eclipse project to see any newly created files/directories.

=========================================================================================
*** Begin a new season on PMS Dev:
	ON DEV MACHINE (www1.g13.pair.com at the time of this writing):
	- If necessary, create the standings-<new season> in the web tree:
		% cd /usr/home/pacdev/public_html/pacmdev.org/sites/default/files/comp/points/
		% mkdir standings-<new season>
	- Add a link to the Support directory to the standings-<new season> directory:
*** use ln -s instead...?
		- copy the Support directory alias from standings-<old season> 
			to standings-<new season>, e.g.:
				% cd /usr/home/pacdev/public_html/pacmdev.org/sites/default/
					files/comp/points/standings-<old season>
				% cp -a Support ../standings-<new season>
				
				
	- Since you've pushed the <new season> files to github you can pull them to our dev machine:
		- cd /usr/home/pacdev/Automation/PMSTopTen
		- git pull
	- Set up your database and populate the properties_DB-<new season>.txt:
		- if necessary (probably won't be since the pull above should do this)
			% cd /usr/home/pacdev/Automation/PMSTopTen/SeasonData/
			% mkdir Season-<new season>
		% cd Season-<new season>
		- create and populate the properties_DB-<new season>.txt file.
		- set permissions:
			% chmod go-rwx properties_DB-<new season>.txt
		
		 
	- We're ready to generate an AGSOTY page for dev:
		% DoTopten <new season>
		
	- Update the "Swimmer of the Year Awards" page:
		(https://pacificmasters.org/content/laura-val-swimmer-year-awards)
		This page will show a link to the AGSOTY page for the "Current Year" and the
		"Previous Year".  It switches years when the date changes years (Dec 31 at midnight.)
		So there is nothing to do UNLESS you want to show other years, in which case do this:
		- drupal log in (https://pacific-masters.org/user)
		- Competition > Swimmer of the Year Awards
		- Edit the php:
			Make sure the text format is "PHP code" and "Disable rich-text" is off.
			The first few lines grab the data from the PacM database, then the output starts. 
			You have to scroll down a bit to find that.  Find this:
  				$year = date('Y');
			and change it to:
  				$year = 2017;  # in this example <new season> is 2017
	- Update the crontab for the dev user:
		- copy the entry for the <old season> and convert it for the <new season>

		
	
	
*** Begin a new season on PMS Prod:
	ON PRODUCTION MACHINE:
	- Add a link to the Support directory to the Generated-<new season> directory:
		- copy the Support directory alias from Generated-<old season> 
			to Generated-<new season>, e.g.:
				% cd /usr/home/pacmasters/public_html/pacificmasters.org/sites/default/files/
					comp/points/standings-<old season>
				% cp -a Support /usr/home/pacmasters/public_html/pacificmasters.org/sites/default/
					files/comp/points/standings-<new season>




*** Remove an old season:

=========================================================================================
*** move a season <yearToProcess> into Historical
cd <appRootDir>/Historical
mkdir <yearToProcess>
mv ../GeneratedFiles/Generated-<yearToProcess>  <yearToProcess>
mv ../SeasonData/Season-<yearToProcess>  <yearToProcess>





=========================================================================================
******  Update remote (master) repository using local repository

- first get list of new and changed files on local repository
% cd <appRootDir>
--- do one of these:
1)
	% git status
		(review list of files and make sure you want them all...)
	% git add -n -A
		(review list of additions and deletions.)
		(	git diff <file>   ---- difference between <file> in local repo and remote repository.

	% git add -A
	% git commit -a
	% git push
OR
2)
	% git status
	--- get list of files that are tracked and:
		modified
		deleted
		% git add <file> for files we want to commit
		% git rm <file> for files we want to delete
		% git checkout -- <file> to discard changed files
	--- Untracked files:
		% git add <file> for files we want to commit



=========================================================================================
******* Update local repository from the remote (master) repository
% cd <appRootDir>
% git pull


=========================================================================================

****** Create a local repository from the PMSTopTen remote repository
(do this on any client...mac or pc or linux box)

# First, we must have the latest PMSPerlModules.  Get them here:
% cd $rootDir			# see Definition of 'rootDir'.  Create if necessary
% git clone https://github.com/bobup/PMSPerlModules

# Next, we need to get the files that contain privileged information:
#	- RSIND files
#	- database config files
# Put them somewhere safe so they will be available when we need them a few steps below.

# Next, we get the latest PMSTopTen files:
% rm -rf PMSTopTen   # if it exists.  You can also move it.
# Create a brand new PMSTopTen directory:
% git clone https://github.com/bobup/PMSTopTen

****  need to add steps to get and maintain our RSIND files!  (We can't store them on github)
...something like this:
cd <appRootDir>/SeasonData/Season-<season>
mkdir PMSSwimmerData
cd PMSSwimmerData

# Next, install the privileged files we gathered above:
#	- put the properties_DB-{season}.txt file into the <appRootDir>/SeasonData/Season-<season> 
#		directory
#	- put the correct RSIND file into the <appRootDir>/SeasonData/Season-<season>/PMSSwimmerData
#		directory.
#	- chmod go-rwx properties_DB-{season}.txt 
#	- chmod go-rwx <appRootDir>/SeasonData/Season-<season>/PMSSwimmerData/*RSIND*
#	- chmod go-rwx <appRootDir>/SeasonData/Season-<season>/PMSSwimmerData
# DO THE ABOVE FOR ALL seasons

# Next, we need to be sure our database configuration parameters are set
# correctly.  They are specified in the 'properties_DB-{season}.txt' file located in the
# <appRootDir>/SeasonData/Season-<season> directory. If you don't have that file (the step
# above copied a previous copy but maybe you didn't have a previous copy) then create it
# from scratch.  To do that follow these steps:
#	- cd <appRootDir>
#	- cp Code/properties_DB-template.txt SeasonData/Season-<season>/properties_DB-<season>.txt
# Then edit SeasonData/Season-<season>/properties_DB-<season>.txt supplying the correct values
# for the 4 database parameters described in the template file.
# NEVER CHECK THE properties_DB-<season>.txt FILE INTO THE github REPOSITORY!  Make sure the
# .gitignore files guarantees that you won't check it in.

---- cut all below ----

The checked in version
# has default values for the database host, database name, database user, 
# and database password.  These need to be modified if necessary.  Don't 
# bother checking in the modified properties_DB-{season}.txt file since it will contain
# information that should not be available to the rest of the world.   
---- DO ONE OF THESE:
--- 1)
% cd <appRootDir>/SeasonData/Season-<season>
% vi properties_DB-{season}.txt
--- remove everything from 
	# database connection...
--- up to BUT NOT INCLUDING
	>include
--- insert correct chunk from ~/Automation/properties-YEAR.txt.  For example, for the
--- 2017 year the correct chunk is:
#### WARNING - CHANGED FOR USE ON PAC DEV SERVER FOR THE 2017 SEASON
# database connection parameters for 2017
# Modified for use on PMS server
dbHost  db89a.pair.com
dbName  caroline_TT2017
dbUser  caroline_5
dbPass  DwBNLDSN

--- OR ----
xxx2)    ----- for 2018
xxx% cd PMSTopTen/Code
xxx % cp ../../TT2018/properties.txt .

---- cut all above ----



# At this point we have the source code but no "Generated Files", so we'll have 
# to generate some.  In the 'SeasonData' directory there should be one or more 
# source directories named "Season-yyyy' where 'yyyy' is some year.  Here's how we'll
# generate some results assuming we have data for target year.  For example, we'll
# use 2017.  Or, plug in whatever year for which you have data.

# First, set up your MySql server.  The following discussion assumes the default
# configuration define in the properties_DB-{season}.txt file described above.
# You need to install MySql and create a root account
# with all permissions.  Then do the following (you may have to change names/passwords
# to match the code - see the call to PMS_MySqlSupport::SetSqlParameters() in the file
# PMSTopTen/Code/Topten2.pl to see what the code uses.)
% mysql -u root -p
<supply root password for your MySql server>
> show databases;
# if you have a database named "TopTen_2017" (where '2017' is the year in this example)
# then you're done.  Or you can drop it like this:
> DROP DATABASE TopTen_2017;
# to create the database do this:
> CREATE DATABASE TopTen_2017;
# then you need to db user who has access to this new database.  See code to confirm
# the name and password.  First see if the DBTopTen user exists:
> select * from mysql.user;
# if not then create the user:
> CREATE USER DBTopTen IDENTIFIED BY 'TopTen';
# then give this user permissions on our TopTen table:
> GRANT ALL ON TopTen_2017.* TO DBTopTen IDENTIFIED BY 'TopTen';
> exit

# Now we're ready to process the source data that we got from Git and create the
# various result files:
% cd PMSTopTen		# Remember: you are now in $rootDir/PMSTopTen
# You may want to change the 'EMAIL_NOTICE' variable in the GenTopten2 script used
# next so it will send an email to the correct person.  Then execute the script:
#
% Code/Scripts/DoFetchAndProcessTopten 2017 y
# REMEMBER:  use the desired year above if you're not testing with 2017!
#
# The above will create the subdirectory GeneratedFiles (if it doesn't exist) and 
# Generated-2017 (if it doesn't exist) and populate the Generated-2017 directory
# with AGSOTY files.





=========================================================================================
Removing sensitive data from a repository
The following was copied from:
	https://help.github.com/articles/removing-sensitive-data-from-a-repository/
It's repeated here just in case that page goes away...


Using filter-branch

Warning: If you run git filter-branch after stashing changes, you won't be able to retrieve your changes with other stash commands. Before running git filter-branch, we recommend unstashing any changes you've made. To unstash the last set of changes you've stashed, run git stash show -p | git apply -R. For more information, see Git Tools Stashing.

To illustrate how git filter-branch works, we'll show you how to remove your file with sensitive data from the history of your repository and add it to .gitignore to ensure that it is not accidentally re-committed.

    If you don't already have a local copy of your repository with sensitive data in its history, clone the repository to your local computer.

    git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
    Initialized empty Git repository in /Users/YOUR-FILE-PATH/YOUR-REPOSITORY/.git/
    remote: Counting objects: 1301, done.
    remote: Compressing objects: 100% (769/769), done.
    remote: Total 1301 (delta 724), reused 910 (delta 522)
    Receiving objects: 100% (1301/1301), 164.39 KiB, done.
    Resolving deltas: 100% (724/724), done.

    Navigate into the repository's working directory.

    cd YOUR-REPOSITORY

    Run the following command, replacing PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA with the path to the file you want to remove, not just its filename. These arguments will:
        Force Git to process, but not check out, the entire history of every branch and tag
        Remove the specified file, as well as any empty commits generated as a result
        Overwrite your existing tags

        git filter-branch --force --index-filter \
        'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' \
        --prune-empty --tag-name-filter cat -- --all
        Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266)
        Ref 'refs/heads/master' was rewritten

    Note: If the file with sensitive data used to exist at any other paths (because it was moved or renamed), you must run this command on those paths, as well.

    Add your file with sensitive data to .gitignore to ensure that you don't accidentally commit it again.

    echo "YOUR-FILE-WITH-SENSITIVE-DATA" >> .gitignore
    git add .gitignore
    git commit -m "Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore"
    [master 051452f] Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore
     1 files changed, 1 insertions(+), 0 deletions(-)

    Double-check that you've removed everything you wanted to from your repository's history, and that all of your branches are checked out.

    Once you're happy with the state of your repository, force-push your local changes to overwrite your GitHub repository, as well as all the branches you've pushed up:

    git push origin --force --all
    Counting objects: 1074, done.
    Delta compression using 2 threads.
    Compressing objects: 100% (677/677), done.
    Writing objects: 100% (1058/1058), 148.85 KiB, done.
    Total 1058 (delta 590), reused 602 (delta 378)
    To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git
     + 48dc599...051452f master -> master (forced update)

    In order to remove the sensitive file from your tagged releases, you'll also need to force-push against your Git tags:

    git push origin --force --tags
    Counting objects: 321, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (166/166), done.
    Writing objects: 100% (321/321), 331.74 KiB | 0 bytes/s, done.
    Total 321 (delta 124), reused 269 (delta 108)
    To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git
     + 48dc599...051452f master -> master (forced update)

    Contact GitHub Support or GitHub Premium Support, asking them to remove cached views and references to the sensitive data in pull requests on GitHub.
    Tell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.

    After some time has passed and you're confident that git filter-branch had no unintended side effects, you can force all objects in your local repository to be dereferenced and garbage collected with the following commands (using Git 1.8.5 or newer):

    git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
    git reflog expire --expire=now --all
    git gc --prune=now
    Counting objects: 2437, done.
    Delta compression using up to 4 threads.
    Compressing objects: 100% (1378/1378), done.
    Writing objects: 100% (2437/2437), done.
    Total 2437 (delta 1461), reused 1802 (delta 1048)

    Note: You can also achieve this by pushing your filtered history to a new or empty repository and then making a fresh clone from GitHub.


=========================================================================================

How to update RSIDN file so next run will use it.

- get new RSIDN file from admin
- put into $appRootDir/SeasonData/Season-$yearToProcess/PMSSwimmerData/.
	- remove the old one if you want.  Keep the most recent old one just in case the new one has problems.
  The code will use the most recent version it can find in the PMSSwimmerData/
  	directory, so just put it there and you're done.  Make sure the file name contains "RSIND" or 


=========================================================================================
How to force re-generation of AGSOTY for <current season> and generation of email with changed stats

To do this we need to change the production stats so that diff will find differences for the email.  The stats are visible here:
	https://pacificmasters.org/points/standings-<current season>/TTStats.html

- ftp to production and download https://pacificmasters.org/points/standings-<current season>/TTStats.html
- edit the copy of TTStats.html
- use ftp to replace https://pacificmasters.org/points/standings-<current season>/TTStats.html
or
- use ftp editor to edit the TTStats.html file in place.

- Then, on dev:
	- execute:
		DoFetchAndProcessTopten <current season> y
		PushTT.bash 2019 y


https://pacificmasters.org/points/standings-2018/TTStats.html


=========================================================================================
How to set up a new dev server to support AGSOTY and open water points:
(For example, in early 2019 we moved from one pair server [caroline.pairserver.com] to
another [pacdev.pairserver.com])

- On the new server create the Automation/ directory.

- Using the scripts/backup.bash script on the old server create a backup.  This will contain 
the Automation tree along with some other stuff.  Put that backup in the Automation/ 
directory on the new server.

- Extract the Automation files from the backup file.  For example, if the backup file
is named "BackupAutomation-2019-02-15.tar.gz" and the path to the Automation/ directory
on the old server is "usr/home/caroline/Automation" then do this:
	% cd [the Automation/ directory created above]
	% tar xf BackupAutomation-2019-02-15.tar.gz usr/home/caroline/Automation
	
- The above extract will create Automation/usr/home/caroline/Automation, so move the restored
files to the root of the Automation/ directory created in the first step above.  E.g.
	% cd usr/home/caroline/Automation
	% mv * [the Automation/ directory created above]
	% cd [the Automation/ directory created above]
	% rm -rf usr
	% mv BackupAutomation-2019-02-15.tar.gz Backups/   # move the backup into our Backups/ directory

- Get the CPAN files and put them into Automation/PerlCpan/:
	Excel::Writer::XLSX module is stored as Automation/PerlCpan/Excel-Writer-XLSX/
	Spreadsheet::Read module is stored as Automation/PerlCpan/Spreadsheet-Read/
	Spreadsheet::XLSX module is stored as Automation/PerlCpan/Spreadsheet-XLSX/
	- take a look here:  https://www.cpan.org/modules/INSTALL.html for one way to do it.
	- if the structure of the directories have changed since the last time the above modules
		were installed it may be necessary to adjust the bup/initCron and bup/initbash scripts
		to change the PERL5LIB environment variable.
	


- There might be some paths containing the old server name.  For example:
	bup/init*
  Fix them and re-run them if necessary.

- If the new server and old server share the same filesystem there might be some permission
	problems in /tmp.  You'll find them and have to fix them before the old server is turned off.
	

You now have the basic infrastructure in place on the new server, and also the DrPacm source
code.  You have to decide whether or not this copy of DrPacm is the master development copy.
Now you have to get the code to support AGSOTY and open water points from GitHub.

For AGSOTY:
See "****** Create a local repository from the PMSTopTen remote repository"
NOTE:  "$rootDir" is the Automation/ directory created above.
NOTE:  The 'properties_DB-{season}.txt' will have to change if the database server has to change.
NOTE:  There might be some paths containing the old server name.  For example:
	Code/Scripts/PMSScripts/*
Make sure the generated files are as expected.

- Test a push and make sure the <rootDir>/TTPushes directory is created and populated.  Make
	sure a push to dev works, and then make sure a push to production works.  (For the production
	push you'll either have to set up a key to the production server or enter the password
	three times, which obviously won't work when using cron!)


For PMS Open Water Points:
See "****** Create a local repository from the PMSOWPoints remote repository"
in the discussion for OW points.
NOTE:  "$rootDir" is the Automation/ directory created above.
NOTE:  There might be some paths containing the old server name.  For example:
	Code/Scripts/PMSScripts/*
Make sure the generated files are as expected.

- Test a push and make sure the <rootDir>/OWPushes directory is created and populated.  Make
	sure a push to dev works, and then make sure a push to production works.  (For the production
	push you'll either have to set up a key to the production server or enter the password
	three times, which obviously won't work when using cron!)

=========================================================================================
Push generated AGSOTY from Dev to Production

This explanation is written assuming the current season is 2020.  This example occurred on
January 7, 2020.

This normally happens automatically when a new AGSOTY page is generated on dev.  But sometimes
the script will refuse to push a new AGSOTY to production if it thinks there might be something wrong
with it.  For example, we get an email that says this:
  (subject:)  2020: Unexpected Total Points on Dev - it's less than 95% of what's on the SERVER
  (body:)
	The SERVER was NOT updated!
				SERVER Total Points is 2239 (95%=2128), DEV Total Points is 1850
		   diff /tmp/TTStats.16937
					/usr/home/pacdev/public_html/pacmdev.org/sites/default/files/comp/points/standings-2020/TTStats.html :
			
	NOTE:  .< lines: PRODUCTION server (old version), .> lines: DEV server (new version)

	(etc...)

The "problem" detected above is that the "new" AGSOTY file is substantially smaller (less than 95%) than the 
previous AGSOTY file generated.  
The above happened right after the 2020 new year after a new RSIND file was uploaded.  The previous RSIND file contained 
members from 2019 and 2020 since it was uploaded on Dec 30.  Then the new RSIND file uploaded on Jan 6 only contained 
members who joined since Oct 1, 2019, not all of 2019.  So it's quite a bit smaller.  And, in all likelihood,
swimmers who may be in PMS top 10 for SCY for the 2020 season (which started on June 1, 2019) may not be PMS
members in 2020 (yet.)  So they will NOT be part of 2020 AGSOTY when computed using the 2020 RSIND file.  Thus, it's
not surprising that the size of the 2020 AGSOTY file generated with the 2020 membership is smaller than the 2020
AGSOTY file generated with the 2019 membership. 
If this happens, you'll need to look at the new (smaller) AGSOTY file and make sure it looks right.  Compare it with
the previous one and look at a few swimmers who show up in the larger one but not the smaller one.  (The diff included
in the email will help.)  Confirm that the last 2019 RSIND file has the missing swimmers but not the 2020 RSIND file.
Once you're convinced that the new AGSOTY file is actually correct push the AGSOTY results from dev to production:
	- log into dev
	% cd ~/Automation/PMSTopTen/Code/Scripts/PMSScripts
	% ./PushTT2Prod.bash 2020 y

Note that the passed 'y' to the script above forces the push to happen even though the numbers indicate a possible
problem.






=========================================================================================
=========================================================================================
=========================================================================================
=========================================================================================
